# Modified from https://github.com/crazyhottommy/pyflow_seuratv3_parameter

import glob
import json

shell.prefix("set -eo pipefail; echo BEGIN at $(date); ")
shell.suffix("; exitstat=$?; echo END at $(date); echo exit status was $exitstat; exit $exitstat")

configfile: "config/scclusteval.yml"

INPUT_OBJECTS = [glob.glob(v) for v in config["input_objects"]]
OUTPUT_DIR = config["output_folder"]
CONDA_ENV_NAME = config["conda_env"]
LOG_DIR = config["Log_Dir"]

NUM_OF_SUBSAMPLE = config["num_of_subsample"]
ks = config["subsample_ks"].strip().split()
resolutions = config["subsample_resolutions"].strip().split()
pcs = config["subsample_pcs"].strip().split()

localrules: all, write_config

rule merge_seurat_objects:
    conda: CONDA_ENV_NAME
    input: INPUT_OBJECTS
    output: OUTPUT_DIR + "/merged_seurat_obj.rds"
    resources: mem=17179869184
    log: LOG_DIR + "/merge_seurat_objects.log"
    message: "merging seurat objects"
    script: "scripts/merge_objects.R"

## the full data set, preprocessing using a set of k, resolution and PC
rule fullsample_cluster:
    conda: CONDA_ENV_NAME
    input: OUTPUT_DIR + "/merged_seurat_obj.rds"
    output: obj = temp(OUTPUT_DIR + "/fullsample/full_sample_k_{k}_resolution_{resolution}_PC_{pc}.rds"),
            df  = temp(OUTPUT_DIR + "/fullsample/full_dataframe_k_{k}_resolution_{resolution}_PC_{pc}.rds")
    resources: mem=17179869184
    log: LOG_DIR + "/full_sample_k_{k}_resolution_{resolution}_PC_{pc}.log"
    message: "preprocessing original full seurat object using k of {wildcards.k} "
             "resolution of {wildcards.resolution}, {wildcards.pc} PCs with {threads} threads"
    script: "scripts/preprocess.R"

rule gather_fullsample:
    conda: CONDA_ENV_NAME
    input: rds = expand(OUTPUT_DIR + "/fullsample/full_dataframe_k_{k}_resolution_{resolution}_PC_{pc}.rds", \
        k = ks, resolution = resolutions, pc = pcs)
    output: OUTPUT_DIR + "/gather_fullsample.rds"
    log: LOG_DIR + "/full_sample_gather_idents.log"
    message: "gathering full sample idents"
    script: "scripts/gather_dataframe.R"


## subsample e.g. 80% of the cells and re-do the clustering for n times
rule subsample_cluster:
    conda: CONDA_ENV_NAME
    input: OUTPUT_DIR + "/fullsample/full_sample_k_{k}_resolution_{resolution}_PC_{pc}.rds"
    output: temp(OUTPUT_DIR + "/subsample/subsample_k_{k}_resolution_{resolution}_PC_{pc}_round_{run_id}.rds")
    resources: mem=17179869184
    log: LOG_DIR + "/subsample_k_{k}_resolution_{resolution}_PC_{pc}_round_{run_id}.log"
    params: rate = config["subsample_rate"]
    message: "subsampling {params.rate} from the full data set, recluster using"
             " k of {wildcards.k} resolution of {wildcards.resolution}, {wildcards.pc} "
             "PCs for round {wildcards.run_id} using {threads} threads"
    script: "scripts/subsample.R"

## gather the subsampled and reclustered cell idents
rule gather_subsample:
    conda: CONDA_ENV_NAME
    input: rds = expand(OUTPUT_DIR + "/subsample/subsample_k_{k}_resolution_{resolution}_PC_{pc}_round_{run_id}.rds", \
        k = ks, resolution = resolutions, pc = pcs, run_id = range(NUM_OF_SUBSAMPLE))
    output: OUTPUT_DIR + "/gather_subsample.rds"
    log: LOG_DIR + "/gather_subsample.log"
    message: "gathering idents for subsamples"
    script: "scripts/gather_dataframe.R"

rule write_config:
    output: OUTPUT_DIR + "/config.json"
    run:
        with open(output[0], "w") as f:
            json.dump(config, f, indent = 2)

rule all:
    input: OUTPUT_DIR + "/gather_subsample.rds",
           OUTPUT_DIR + "/gather_fullsample.rds",
           OUTPUT_DIR + "/config.json"
